@namespace Watchtower
@using Watchtower.Data
@using MongoDB.Driver

@if (loaded) {
    <tr>
        <td>
            <button class=@IconClass @onclick="ToggleCollapsed">
                @* <i class="bi-caret-down-fill" /> *@
                @resource.CurrentStatus.ToString()
            </button>

        </td>
        <td>
            @resource.method @resource.path
        </td>
        <td>
            @Requests.First().Status
        </td>
        <td>
            @resource.expectedStatus
        </td>
        <td>
            @Requests.First().ResponseTime
        </td>
        <td>
            @resource.expectedResponseTime
        </td>
        <td>
            @resource.method @resource.path
        </td>
    </tr>
    <tr>
        <td colspan=7>
        @if (!Collapsed) {
            <RequestsTable requests=@Requests collapsed=@Collapsed resource=@resource />
        }
        </td>
    </tr>
} else {
    <tr><td colspan=7><i>Lastar inn ressursenâ€¦</i></td></tr>
}

@code {
    [ParameterAttribute]
    public WatchtowerResource? resource { get; set; }
    [ParameterAttribute]
    public IMongoClient? client { get; set; }
    public List<WatchtowerRequest> Requests { get; set; }
    private bool loaded { get; set; }

    private bool Collapsed { get; set; } = true;

    public string IconClass { get {
        if (this.Collapsed == null) return "btn";
        return "btn " + (this.Collapsed ? "icon-rotated" : "icon-unrotated");
    } }

    private void ToggleCollapsed()
    {
        if (this.Collapsed == null) { this.Collapsed = false; }
        this.Collapsed = !this.Collapsed;
    }

    protected override async Task OnInitializedAsync()
    {
        if (this.resource == null) return;
        this.resource.FetchRequests();
        if (this.resource.Requests == null) return;
        Requests = resource.Requests;
        loaded = true;
    }
}
